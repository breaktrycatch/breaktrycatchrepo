package com.fuelindustries.events {	import flash.events.Event;	/**	 * The RemotingEvent class defines the remoting event that is associated with the FlashRemoting Class	 * 	 * @see com.fuelindustries.net.remoting.FlashRemoting FlashRemoting	 */	public class RemotingEvent extends Event	{		/**         * Defines the value of the <code>type</code> property of a <code>remotingSuccess</code>		 * event object.		 *		 * <p>This event has the following properties:</p>		 *  <table class="innertable" width="100%">		 *     <tr><th>Property</th><th>Value</th></tr>		 *     <tr><td><code>bubbles</code></td><td><code>false</code></td></tr>		 *     <tr><td><code>cancelable</code></td><td><code>false</code>; there is no default		 * 			behavior to cancel.</td></tr>		 *     <tr><td><code>currentTarget</code></td><td>The object that is actively processing 		 * 			the event object with an event listener.</td></tr>		 *     <tr><td><code>method</code></td><td><code>0</code>; the method from which the response is coming from		 * 	   <tr><td><code>info</code></td><td><code>0</code>; The info object which contains the result from calling the method on the server </td></tr>		 *		<tr><td><code>target</code></td><td>The object that dispatched the event. The target is          *           not always the object listening for the event. Use the <code>currentTarget</code>		 * 			property to access the object that is listening for the event.</td></tr>		 *  </table>		 *          * @eventType remotingSuccess		 */		public static const SUCCESS:String="remotingSuccess";		/**         * Defines the value of the <code>type</code> property of a <code>remotingFailure</code>		 * event object.		 *		 * <p>This event has the following properties:</p>		 *  <table class="innertable" width="100%">		 *     <tr><th>Property</th><th>Value</th></tr>		 *     <tr><td><code>bubbles</code></td><td><code>false</code></td></tr>		 *     <tr><td><code>cancelable</code></td><td><code>false</code>; there is no default		 * 			behavior to cancel.</td></tr>		 *     <tr><td><code>currentTarget</code></td><td>The object that is actively processing 		 * 			the event object with an event listener.</td></tr>		 *     <tr><td><code>method</code></td><td><code>0</code>; the method from which the response is coming from		 * 	   <tr><td><code>info</code></td><td><code>0</code>; The info object which contains the result from calling the method on the server </td></tr>		 *		<tr><td><code>target</code></td><td>The object that dispatched the event. The target is          *           not always the object listening for the event. Use the <code>currentTarget</code>		 * 			property to access the object that is listening for the event.</td></tr>		 *  </table>		 *          * @eventType remotingFailure		 */		public static const FAILURE:String="remotingFailure";		/**         * Defines the value of the <code>type</code> property of a <code>remotingError</code>		 * event object. This event occurs when you are unable to connect to the gateway.		 *		 * <p>This event has the following properties:</p>		 *  <table class="innertable" width="100%">		 *     <tr><th>Property</th><th>Value</th></tr>		 *     <tr><td><code>bubbles</code></td><td><code>false</code></td></tr>		 *     <tr><td><code>cancelable</code></td><td><code>false</code>; there is no default		 * 			behavior to cancel.</td></tr>		 *     <tr><td><code>currentTarget</code></td><td>The object that is actively processing 		 * 			the event object with an event listener.</td></tr>		 *     <tr><td><code>method</code></td><td><code>0</code>; the method from which the response is coming from		 * 	   <tr><td><code>info</code></td><td><code>0</code>; The info object which contains the result from calling the method on the server </td></tr>		 *		<tr><td><code>target</code></td><td>The object that dispatched the event. The target is          *           not always the object listening for the event. Use the <code>currentTarget</code>		 * 			property to access the object that is listening for the event.</td></tr>		 *  </table>		 *          * @eventType remotingError		 */		public static const ERROR:String = "remotingError";				private var __info:Object;		private var __method:String;				/**         * Gets the method associated to the result		 */		public function get method():String		{			return( __method );			}				/**         * Gets the result object returned from the server		 */		public function get info():Object		{			return( __info );			}				/**		 * Creates a new RemotingEvent object with the specified parameters.		 *         * @param type The type of RemotingEvent		 * <code>RemotingEvent.SUCCESS</code> indicates the server has returned successfully		 * <code>RemotingEvent.FAILURE</code> indicates there was an error when calling the server		 * <code>RemotingEvent.ERROR</code> indicates there was an error connecting to the gateway.         * @param method The method on the server that was called         * @param info The result object returned from the server.		 */		public function RemotingEvent( type:String, method:String, info:Object )		{			__info = info;			__method = method;			super( type, false, false );		}				/**		 * Returns a string that contains all the properties of the RemotingEvent object. The		 * string has the following format:		 * 		 * <p>[<code>RemotingEvent type=<em>value</em> bubbles=<em>value</em>		 * cancelable=<em>value</em> type=<em>value</em>		 * method=<em>value</em></code>]</p>		 *         * @return A string representation of the RemotingEvent object.		 */		override public function toString():String		{			return( formatToString( "RemotingEvent", "type", "method" ) ); 			}				/**		 * Creates a copy of the RemotingEvent object and sets the value of each parameter to 		 * match the original.		 *         * @return A new RemotingEvent object with parameter values that match the original.		 */		override public function clone():Event		{			return( new RemotingEvent( type, __method, __info ) );			}	}}