<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/halo" 
		 width="100%" 
		 height="30"
		 initialize="onNotificationInitialize(event)">
	<fx:Declarations>
		<s:Parallel id="showEffect">
			<s:Resize target="{this}" duration="500" heightFrom="0" heightTo="20"/>
			<s:Fade target="{this}" duration="500" alphaFrom="0" alphaTo="1"/>
		</s:Parallel>
		<s:Parallel id="hideEffect" effectEnd="onHideComplete(event)">
			<s:Resize target="{this}" duration="500" heightFrom="{height}" heightTo="0"/>
			<s:Fade target="{this}" duration="500" alphaFrom="1" alphaTo="0"/>
		</s:Parallel>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.commitmon.model.ProjectVO;
			import com.commitmon.model.ApplicationState;
			import com.commitmon.view.event.ViewChangeEvent;
			
			import flash.events.MouseEvent;
			
			import mx.binding.utils.ChangeWatcher;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			import mx.events.PropertyChangeEvent;
			
			protected var _data : ProjectVO;
			private var _originalHeight : int;
			
			protected function onNotificationInitialize(event:FlexEvent):void
			{
				visible = false;
				height = 0;
			}
			
			public function set data(d : ProjectVO) : void
			{
				_data = d;
				setData(d);
			}
			
			protected function setData(vo : ProjectVO):void
			{
				numNotifications.text = vo.totalUnchecked.toString();
				projectName.text = vo.name;
				
				ChangeWatcher.watch(vo, 'totalUnchecked', onTotalUncheckedUpdated);
				
			}
			
			protected function onTotalUncheckedUpdated(event : PropertyChangeEvent):void
			{
				if(event.newValue > 0)
				{
					visible = true;
					showEffect.play();
					numNotifications.text = event.newValue.toString();	
				}
				else
				{
					hideEffect.play();
				}
			}

			protected function onCloseClicked(event:MouseEvent):void
			{
				if(!hideEffect.isPlaying)
				{
					hideEffect.play();
				}
			}
			
			protected function onHideComplete(event:EffectEvent):void
			{
				visible = false;
			}

			protected function onBarClicked(event:MouseEvent):void
			{
				_data.markAllAsViewed();
				hideEffect.addEventListener(EffectEvent.EFFECT_END, onSendNotification);
				onCloseClicked(event);
			}
			
			protected function onSendNotification(event:EffectEvent):void
			{
				hideEffect.removeEventListener(EffectEvent.EFFECT_END, onSendNotification);
				
				var evt : ViewChangeEvent = new ViewChangeEvent(ViewChangeEvent.CHANGE_VIEW);
				evt.selectedView = ViewChangeEvent.PROJECT_DETAILS;
				evt.data = _data;
				dispatchEvent(evt);
			}

		]]>
	</fx:Script>
	<s:states>
		<s:State name="normal"/>
		<s:State name="hovered"/>
	</s:states>
	<s:Rect width="100%" height="100%">
		<s:fill>
			<s:SolidColor color.hovered="#212121"/>
		</s:fill>
	</s:Rect>
	<s:Group rollOver="currentState='hovered';" rollOut="currentState='normal';" styleName="cell-out" styleName.hovered="cell-over" width="100%" height="100%">
		<s:HGroup click="onBarClicked(event)" height="100%" width="100%" gap="3">
			<s:Label id="numNotifications" x="0" y="10" styleName="label-content-text" height="100%" verticalAlign="middle" text="1"/>
			<s:Label x="10" y="10" styleName="label-text" text="new commit in" height="100%" verticalAlign="middle"/>
			<s:Label id="projectName" x="113" y="10" styleName="label-content-text" height="100%" verticalAlign="middle" text="Test Project"/>
		</s:HGroup>
		<s:Button id="close" click="onCloseClicked(event)" styleName="close-button" label="X" width="30" height="20" right="0"/>
	</s:Group>
</s:Group>
