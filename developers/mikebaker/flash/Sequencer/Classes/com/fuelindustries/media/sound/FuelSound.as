package com.fuelindustries.media.sound {	import com.fuelindustries.tween.interfaces.IVolume;	import flash.display.DisplayObject;	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundTransform;	import flash.system.ApplicationDomain;	import flash.utils.getDefinitionByName;	/**	 * @author julian	 */	public class FuelSound extends BaseSound  implements IVolume	{		private var __linkage:String;		private var __sound:Sound;		private var __channel:SoundChannel;		private var __applicationDomain:ApplicationDomain;						public function FuelSound( linkage:String, target:DisplayObject = null )		{			super();						setApplicationDomain( target );									__linkage = linkage;			__sound = getSoundClass( linkage );		}				public function setApplicationDomain( target:DisplayObject ):void		{			if( target != null )			{				__applicationDomain = target.loaderInfo.applicationDomain;			}		}		override public function set soundTransform( sndTransform:SoundTransform ):void		{			__transform = sndTransform;			if( __channel != null )			{				__channel.soundTransform = __transform;				}		}		override public function get soundTransform():SoundTransform		{			if( __channel != null )			{				return( __channel.soundTransform );				}						return( __transform );		}		public override function play( startTime:Number = 0, loops:int = 0, sndTransform:SoundTransform = null ):SoundChannel		{			super.play( startTime, loops, sndTransform );			__channel = __sound.play( startTime, loops, __transform );				return __channel;		}				public override function stop():void		{			if( __channel != null )			{				__transform = __channel.soundTransform;				__channel.stop();			}			}				public override function volumeTo( volume:int, duration:int, type:String = null, callback:Function=null, ...callbackArgs:Array ):void		{			if( __channel != null )			{				callbackArgs.unshift( callback );				callbackArgs.unshift( type );				callbackArgs.unshift( duration );				callbackArgs.unshift( volume );				super.volumeTo.apply( super, callbackArgs );			}			}						private function getSoundClass( linkage:String ):Sound		{			var classRef:Class;						if( __applicationDomain == null )			{				classRef = flash.utils.getDefinitionByName( linkage ) as Class;			}			else			{				classRef = __applicationDomain.getDefinition( linkage ) as Class;			}			var instance:Sound = new classRef() as Sound;            return( instance );			}	}}